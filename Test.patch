diff --git a/video_drm.c b/video_drm.c
index 7fe42a5..2f3fe67 100644
--- a/video_drm.c
+++ b/video_drm.c
@@ -34,6 +34,8 @@
 #include <stdbool.h>
 #include <unistd.h>
 
+#include <inttypes.h>
+
 #include <libintl.h>
 #define _(str) gettext(str)		///< gettext shortcut
 #define _N(str) str			///< gettext_noop shortcut
@@ -302,8 +304,8 @@ void SetBuf(VideoRender * render, struct drm_buf *buf, uint32_t plane_id)
 	drmModeAtomicReqPtr ModeReq;
 	const uint32_t flags = DRM_MODE_ATOMIC_ALLOW_MODESET;
 
-//	fprintf(stderr, "Set atomic buf buffers %2i fd_prime %"PRIu32" Handle %"PRIu32" fb_id %3i %i x %i\n",
-//		render->buffers, buf->fd_prime, buf->handle[0], buf->fb_id, buf->width, buf->height);
+	fprintf(stderr, "Set atomic buffers %2i fd_prime %"PRIu32" Handle %"PRIu32" fb_id %3i %i x %i\n",
+		render->buffers, buf->fd_prime, buf->handle[0], buf->fb_id, buf->width, buf->height);
 
 	if (!(ModeReq = drmModeAtomicAlloc()))
 		fprintf(stderr, "SetBuf: cannot allocate atomic request (%d): %m\n", errno);
@@ -594,6 +604,10 @@ static int SetupFB(VideoRender * render, struct drm_buf *buf,
 		buf->offset[0] = primedata->layers[0].planes[0].offset;
 		buf->pitch[1] = primedata->layers[0].planes[1].pitch;
 		buf->offset[1] = primedata->layers[0].planes[1].offset;
+
+		fprintf(stderr, "SetupFB: prime pitch[0] %d offset[0] %d pitch[1] %d offset[1] %d Fmt %4.4s Modf %4.4s\n",
+			buf->pitch[0], buf->offset[0], buf->pitch[1], buf->offset[1],
+			(char *)&buf->pix_fmt, (char *)&modifiers[0]);
 	} else {
 		memset(&creq, 0, sizeof(struct drm_mode_create_dumb));
 		creq.width = buf->width;
@@ -644,6 +658,9 @@ static int SetupFB(VideoRender * render, struct drm_buf *buf,
 		return -errno;
 	}
 
+	fprintf(stderr, "SetupFB: width %d height %d pitch %" PRIu32 " offset %" PRIu32 "  %4.4s\n",
+		buf->width, buf->height, buf->pitch[0], buf->offset[0], (char *) &buf->pix_fmt);
+
 	if (primedata)
 		return 0;
 
@@ -1182,10 +1199,10 @@ enum AVPixelFormat Video_get_format(__attribute__ ((unused))VideoRender * render
 		AVCodecContext * video_ctx, const enum AVPixelFormat *fmt)
 {
 	while (*fmt != AV_PIX_FMT_NONE) {
-#ifdef DEBUG
+//#ifdef DEBUG
 		fprintf(stderr, "Video_get_format: PixelFormat %s Codecname: %s\n",
 			av_get_pix_fmt_name(*fmt), video_ctx->codec->name);
-#endif
+//#endif
 		if (*fmt == AV_PIX_FMT_DRM_PRIME) {
 			return AV_PIX_FMT_DRM_PRIME;
 		}
@@ -1223,7 +1240,11 @@ void EnqueueFB(VideoRender * render, AVFrame *inframe)
 			if (SetupFB(render, buf, NULL))
 				fprintf(stderr, "EnqueueFB: SetupFB FB %i x %i failed\n",
 					buf->width, buf->height);
-			else render->buffers++;
+			else {
+				if (render->buffers == 0)
+					SetBuf(render, buf, render->video_plane);
+				render->buffers++;
+			}
 
 			if (drmPrimeHandleToFD(render->fd_drm, buf->handle[0],
 				DRM_CLOEXEC | DRM_RDWR, &buf->fd_prime))
@@ -1251,14 +1272,24 @@ void EnqueueFB(VideoRender * render, AVFrame *inframe)
 
 	frame = av_frame_alloc();
 	frame->pts = inframe->pts;
-	primedata = av_mallocz(sizeof(AVDRMFrameDescriptor));
-
+	frame->width = inframe->width;
+	frame->height = inframe->height;
 	frame->format = AV_PIX_FMT_DRM_PRIME;
+	primedata = av_mallocz(sizeof(AVDRMFrameDescriptor));
 	primedata->objects[0].fd = buf->fd_prime;
 	frame->data[0] = (uint8_t *)primedata;
 	frame->buf[0] = av_buffer_create((uint8_t *)primedata, sizeof(*primedata),
 				ReleaseFrame, NULL, AV_BUFFER_FLAG_READONLY);
 
+	if (!render->StartCounter)
+		fprintf(stderr, "EnqueueFB: IN  buf %d x %d frame %d x %d format %s\n",
+			buf->width, buf->height, inframe->width, inframe->height,
+			av_get_pix_fmt_name(inframe->format));
+	if (!render->StartCounter)
+		fprintf(stderr, "EnqueueFB: OUT buf %d x %d frame %d x %d format %s\n",
+			buf->width, buf->height, frame->width, frame->height,
+			av_get_pix_fmt_name(frame->format));
+
 	av_frame_free(&inframe);
 
 	render->FramesRb[render->FramesWrite] = frame;
@@ -1491,6 +1522,11 @@ void VideoRenderFrame(VideoRender * render,
 			render->FramesWrite = (render->FramesWrite + 1) % VIDEO_SURFACES_MAX;
 			atomic_inc(&render->FramesFilled);
 		} else {
+			if (!render->StartCounter)
+				fprintf(stderr, "VideoRenderFrame: frame %d x %d video_ctx %d x %d\n",
+					frame->width, frame->height,
+					video_ctx->width, video_ctx->height);
+
 			EnqueueFB(render, frame);
 		}
 	}
